package hu.sm.poissonregressionfootball.simle;

import org.springframework.stereotype.Service;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.Evaluation;
import weka.classifiers.trees.RandomForest;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.unsupervised.attribute.Normalize;

import java.util.Random;

@Service
public class WekaPrediction {

    //private M5P model = new M5P();
    private RandomForest model = new RandomForest();
    //private J48 model = new J48();
    private Instances data;

    public WekaPrediction() {
        try {
            makeModel();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void makeModel() throws Exception {
        // üîπ 1. Adatok bet√∂lt√©se
        DataSource source = new DataSource("src\\main\\resources\\games.arff");
        data = source.getDataSet();

        if (data == null) {
            System.out.println("Hiba: Az ARFF f√°jl nem t√∂lt≈ëd√∂tt be!");
            return;
        }

        // üîπ 2. Target be√°ll√≠t√°sa
        data.setClassIndex(data.numAttributes() - 1);
/*
        // üîπ 3. Attrib√∫tum kiv√°laszt√°s (redund√°ns oszlopok elt√°vol√≠t√°sa)
        AttributeSelection filter = new AttributeSelection();
        filter.setEvaluator(new CfsSubsetEval()); // Legfontosabb attrib√∫tumok kiv√°laszt√°sa
        filter.setSearch(new BestFirst());
        filter.setInputFormat(data);
        data = Filter.useFilter(data, filter);

        // üîπ 4. Normaliz√°l√°s (0-1 k√∂z√© sk√°l√°z√°s)
        Normalize normalize = new Normalize();
        normalize.setInputFormat(data);
        data = Filter.useFilter(data, normalize);

        // üîπ 5. Modell be√°ll√≠t√°sa (Optimaliz√°lt param√©terek)
        model = new RandomForest();
        model.setNumIterations(100); // Kevesebb fa (cs√∂kkenti a t√∫lilleszt√©st)
        model.setMaxDepth(10); // Sek√©lyebb f√°k ‚Üí jobb √°ltal√°nos√≠t√°s
        model.setNumFeatures((int) Math.sqrt(data.numAttributes())); // ‚àö(attrib√∫tumok sz√°ma)
        model.setSeed(42); // Stabilabb, reproduk√°lhat√≥ eredm√©nyek
*/
        // üîπ 6. Modell tan√≠t√°sa
        model.buildClassifier(data);
        System.out.println(model);

        // üîπ 7. Modell ki√©rt√©kel√©se (5-fold cross-validation)
        Evaluation eval = new Evaluation(data);
        eval.crossValidateModel(model, data, 5, new Random(1));
        System.out.println(eval.toSummaryString("\n√ârt√©kel√©si eredm√©nyek\n", false));

        // üîπ 8. Hibam√©r≈ë mutat√≥k ki√≠r√°sa
        System.out.println("Mean Absolute Error: " + eval.meanAbsoluteError());
        System.out.println("Root Mean Squared Error: " + eval.rootMeanSquaredError());
        System.out.println("Correlation Coefficient: " + eval.correlationCoefficient());
    }


    public double predict(Integer homeTeam, Integer awayTeam) {
        try {
            Instance instance = new DenseInstance(data.numAttributes());
            instance.setDataset(data);

            // P√©lda: ha a 3. √©s 4. attrib√∫tum a g√≥lok sz√°ma
            //instance.setValue(3, homeGoals);
            //instance.setValue(4, awayGoals);
            instance.setValue(5, homeTeam);
            instance.setValue(6, awayTeam);

            return model.classifyInstance(instance); // Predikci√≥
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }
}
